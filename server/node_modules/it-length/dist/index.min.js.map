{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["/**\n * @packageDocumentation\n *\n * Counts the number of items in an (async)iterable.\n *\n * N.b. will consume the iterable\n *\n * @example\n *\n * ```javascript\n * import length from 'it-length'\n *\n * // This can also be an iterator, generator, etc\n * const values = [0, 1, 2, 3, 4]\n *\n * const res = length(values)\n *\n * console.info(res) // 5\n * ```\n *\n * Async sources must be awaited:\n *\n * ```javascript\n * import length from 'it-length'\n *\n * const values = async function * () {\n *   yield * [0, 1, 2, 3, 4]\n * }\n *\n * const res = await length(values())\n *\n * console.info(res) // 5\n * ```\n */\n\nfunction isAsyncIterable <T> (thing: any): thing is AsyncIterable<T> {\n  return thing[Symbol.asyncIterator] != null\n}\n\n/**\n * Consumes the passed iterator and returns the number of items it contained\n */\nfunction length (source: Iterable<unknown>): number\nfunction length (source: Iterable<unknown> | AsyncIterable<unknown>): Promise<number>\nfunction length (source: Iterable<unknown> | AsyncIterable<unknown>): Promise<number> | number {\n  if (isAsyncIterable(source)) {\n    return (async () => {\n      let count = 0\n\n      for await (const _ of source) { // eslint-disable-line @typescript-eslint/no-unused-vars\n        count++\n      }\n\n      return count\n    })()\n  } else {\n    let count = 0\n\n    for (const _ of source) { // eslint-disable-line @typescript-eslint/no-unused-vars\n      count++\n    }\n\n    return count\n  }\n}\n\nexport default length\n"],
  "mappings": ";4bAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAmCA,SAASC,EAAqBC,EAAU,CACtC,OAAOA,EAAM,OAAO,aAAa,GAAK,IACxC,CAOA,SAASC,EAAQC,EAAkD,CACjE,GAAIH,EAAgBG,CAAM,EACxB,OAAQ,SAAW,CACjB,IAAIC,EAAQ,EAEZ,cAAiBC,KAAKF,EACpBC,IAGF,OAAOA,CACT,GAAE,EACG,CACL,IAAIA,EAAQ,EAEZ,QAAWC,KAAKF,EACdC,IAGF,OAAOA,CACT,CACF,CAEA,IAAAL,EAAeG",
  "names": ["index_exports", "__export", "index_default", "isAsyncIterable", "thing", "length", "source", "count", "_"]
}
