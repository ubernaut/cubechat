/**
 * @packageDocumentation
 *
 * A [libp2p transport](https://docs.libp2p.io/concepts/transports/overview/) based on the TCP networking stack.
 *
 * @example
 *
 * ```TypeScript
 * import { createLibp2p } from 'libp2p'
 * import { tcp } from '@libp2p/tcp'
 * import { multiaddr } from '@multiformats/multiaddr'
 *
 * const node = await createLibp2p({
 *   transports: [
 *     tcp()
 *   ]
 * })
 *
 * const ma = multiaddr('/ip4/123.123.123.123/tcp/1234')
 *
 * // dial a TCP connection, timing out after 10 seconds
 * const connection = await node.dial(ma, {
 *   signal: AbortSignal.timeout(10_000)
 * })
 *
 * // use connection...
 * ```
 */
import { serviceCapabilities, transportSymbol } from '@libp2p/interface';
export class TCP {
    opts;
    metrics;
    components;
    log;
    constructor() {
        throw new Error('TCP connections are not possible in browsers');
    }
    [transportSymbol] = true;
    [Symbol.toStringTag] = '@libp2p/tcp';
    [serviceCapabilities] = [
        '@libp2p/transport'
    ];
    async dial() {
        throw new Error('TCP connections are not possible in browsers');
    }
    createListener() {
        throw new Error('TCP connections are not possible in browsers');
    }
    listenFilter() {
        return [];
    }
    dialFilter() {
        return [];
    }
}
//# sourceMappingURL=tcp.browser.js.map