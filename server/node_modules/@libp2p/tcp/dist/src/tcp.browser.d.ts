/**
 * @packageDocumentation
 *
 * A [libp2p transport](https://docs.libp2p.io/concepts/transports/overview/) based on the TCP networking stack.
 *
 * @example
 *
 * ```TypeScript
 * import { createLibp2p } from 'libp2p'
 * import { tcp } from '@libp2p/tcp'
 * import { multiaddr } from '@multiformats/multiaddr'
 *
 * const node = await createLibp2p({
 *   transports: [
 *     tcp()
 *   ]
 * })
 *
 * const ma = multiaddr('/ip4/123.123.123.123/tcp/1234')
 *
 * // dial a TCP connection, timing out after 10 seconds
 * const connection = await node.dial(ma, {
 *   signal: AbortSignal.timeout(10_000)
 * })
 *
 * // use connection...
 * ```
 */
import { serviceCapabilities, transportSymbol } from '@libp2p/interface';
import type { TCPDialEvents } from './index.js';
import type { Connection, Transport, Listener } from '@libp2p/interface';
import type { Multiaddr } from '@multiformats/multiaddr';
export declare class TCP implements Transport<TCPDialEvents> {
    private readonly opts;
    private readonly metrics?;
    private readonly components;
    private readonly log;
    constructor();
    readonly [transportSymbol] = true;
    readonly [Symbol.toStringTag] = "@libp2p/tcp";
    readonly [serviceCapabilities]: string[];
    dial(): Promise<Connection>;
    createListener(): Listener;
    listenFilter(): Multiaddr[];
    dialFilter(): Multiaddr[];
}
//# sourceMappingURL=tcp.browser.d.ts.map