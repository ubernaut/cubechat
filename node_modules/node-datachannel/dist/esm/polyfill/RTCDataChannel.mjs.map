{"version":3,"file":"RTCDataChannel.mjs","sources":["../../../src/polyfill/RTCDataChannel.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport * as exceptions from './Exception';\nimport { DataChannel } from '../lib/index';\nimport { RTCErrorEvent } from './Events';\n\nexport default class RTCDataChannel extends EventTarget implements globalThis.RTCDataChannel {\n  #dataChannel: DataChannel;\n  #readyState: globalThis.RTCDataChannelState;\n  #bufferedAmountLowThreshold: number;\n  #binaryType: BinaryType;\n  #maxPacketLifeTime: number | null;\n  #maxRetransmits: number | null;\n  #negotiated: boolean;\n  #ordered: boolean;\n  #id: number;\n  #label: string;\n  #protocol: string;\n\n  #closeRequested = false;\n\n  // events\n  onbufferedamountlow: globalThis.RTCDataChannel['onbufferedamountlow'] = null;\n  onclose: globalThis.RTCDataChannel['onclose'] = null;\n  onclosing: globalThis.RTCDataChannel['onclosing'] = null;\n  onerror: globalThis.RTCDataChannel['onerror'] = null;\n  onmessage: globalThis.RTCDataChannel['onmessage'] = null;\n  onopen: globalThis.RTCDataChannel['onopen'] = null;\n\n  constructor(dataChannel: DataChannel, opts: globalThis.RTCDataChannelInit = {}) {\n    super();\n\n    this.#dataChannel = dataChannel;\n    this.#binaryType = 'arraybuffer';\n    this.#readyState = this.#dataChannel.isOpen() ? 'open' : 'connecting';\n    this.#bufferedAmountLowThreshold = 0;\n    this.#maxPacketLifeTime = opts.maxPacketLifeTime ?? null;\n    this.#maxRetransmits = opts.maxRetransmits ?? null;\n    this.#negotiated = opts.negotiated ?? false;\n    this.#ordered = opts.ordered ?? true;\n    this.#id = this.#dataChannel.getId();\n    this.#label = this.#dataChannel.getLabel();\n    this.#protocol = this.#dataChannel.getProtocol();\n\n    // forward dataChannel events\n    this.#dataChannel.onOpen(() => {\n      this.#readyState = 'open';\n      this.dispatchEvent(new Event('open', {}));\n    });\n\n    this.#dataChannel.onClosed(() => {\n      // Simulate closing event\n      if (!this.#closeRequested) {\n        this.#readyState = 'closing';\n        this.dispatchEvent(new Event('closing'));\n      }\n\n      setImmediate(() => {\n        this.#readyState = 'closed';\n        this.dispatchEvent(new Event('close'));\n      });\n    });\n\n    this.#dataChannel.onError((msg) => {\n      this.dispatchEvent(\n        new RTCErrorEvent('error', {\n          error: new RTCError(\n            {\n              errorDetail: 'data-channel-failure',\n            },\n            msg,\n          ),\n        }),\n      );\n    });\n\n    this.#dataChannel.onBufferedAmountLow(() => {\n      this.dispatchEvent(new Event('bufferedamountlow'));\n    });\n\n    this.#dataChannel.onMessage((message) => {\n      if (typeof message === 'string') {\n        this.dispatchEvent(new MessageEvent('message', { data: message }));\n        return;\n      }\n\n      let data: Blob | ArrayBuffer;\n\n      if (message instanceof ArrayBuffer) {\n        data = message;\n      } else {\n        data = message.buffer;\n\n        if (message.byteOffset !== 0 || message.byteLength !== message.buffer.byteLength) {\n          // message is view on underlying buffer, must create new\n          // ArrayBuffer that only contains message data\n          data = new ArrayBuffer(message.byteLength);\n          new Uint8Array(data, 0, message.byteLength).set(message);\n        }\n      }\n\n      if (this.#binaryType === 'blob') {\n        data = new Blob([data]);\n      }\n\n      this.dispatchEvent(new MessageEvent('message', { data }));\n    });\n\n    // forward events to properties\n    this.addEventListener('message', (e) => {\n      if (this.onmessage) this.onmessage(e as MessageEvent);\n    });\n    this.addEventListener('bufferedamountlow', (e) => {\n      if (this.onbufferedamountlow) this.onbufferedamountlow(e);\n    });\n    this.addEventListener('error', (e) => {\n      if (this.onerror) this.onerror(e as RTCErrorEvent);\n    });\n    this.addEventListener('close', (e) => {\n      if (this.onclose) this.onclose(e);\n    });\n    this.addEventListener('closing', (e) => {\n      if (this.onclosing) this.onclosing(e);\n    });\n    this.addEventListener('open', (e) => {\n      if (this.onopen) this.onopen(e);\n    });\n  }\n\n  set binaryType(type) {\n    if (type !== 'blob' && type !== 'arraybuffer') {\n      throw new DOMException(\n        \"Failed to set the 'binaryType' property on 'RTCDataChannel': Unknown binary type : \" +\n          type,\n        'TypeMismatchError',\n      );\n    }\n    this.#binaryType = type;\n  }\n\n  get binaryType(): BinaryType {\n    return this.#binaryType;\n  }\n\n  get bufferedAmount(): number {\n    return this.#dataChannel.bufferedAmount();\n  }\n\n  get bufferedAmountLowThreshold(): number {\n    return this.#bufferedAmountLowThreshold;\n  }\n\n  set bufferedAmountLowThreshold(value) {\n    const number = Number(value) || 0;\n    this.#bufferedAmountLowThreshold = number;\n    this.#dataChannel.setBufferedAmountLowThreshold(number);\n  }\n\n  get id(): number | null {\n    return this.#id;\n  }\n\n  get label(): string {\n    return this.#label;\n  }\n\n  get maxPacketLifeTime(): number | null {\n    return this.#maxPacketLifeTime;\n  }\n\n  get maxRetransmits(): number | null {\n    return this.#maxRetransmits;\n  }\n\n  get negotiated(): boolean {\n    return this.#negotiated;\n  }\n\n  get ordered(): boolean {\n    return this.#ordered;\n  }\n\n  get protocol(): string {\n    return this.#protocol;\n  }\n\n  get readyState(): globalThis.RTCDataChannelState {\n    return this.#readyState;\n  }\n\n  send(data): void {\n    if (this.#readyState !== 'open') {\n      throw new exceptions.InvalidStateError(\n        \"Failed to execute 'send' on 'RTCDataChannel': RTCDataChannel.readyState is not 'open'\",\n      );\n    }\n\n    // Needs network error, type error implemented\n    if (typeof data === 'string') {\n      this.#dataChannel.sendMessage(data);\n    } else if (data instanceof Blob) {\n      data.arrayBuffer().then((ab) => {\n        if (process?.versions?.bun) {\n          this.#dataChannel.sendMessageBinary(Buffer.from(ab));\n        } else {\n          this.#dataChannel.sendMessageBinary(new Uint8Array(ab));\n        }\n      });\n    } else if (data instanceof Uint8Array) {\n      this.#dataChannel.sendMessageBinary(data);\n    } else {\n      if (process?.versions?.bun) {\n        this.#dataChannel.sendMessageBinary(Buffer.from(data));\n      } else {\n        this.#dataChannel.sendMessageBinary(new Uint8Array(data));\n      }\n    }\n  }\n\n  close(): void {\n    this.#closeRequested = true;\n    setImmediate(() => {\n      this.#dataChannel.close();\n    });\n  }\n}\n"],"names":["exceptions.InvalidStateError"],"mappings":"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"}