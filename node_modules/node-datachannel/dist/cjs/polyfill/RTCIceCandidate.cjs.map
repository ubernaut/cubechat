{"version":3,"file":"RTCIceCandidate.cjs","sources":["../../../src/polyfill/RTCIceCandidate.ts"],"sourcesContent":["// https://developer.mozilla.org/docs/Web/API/RTCIceCandidate\n//\n// Example: candidate:123456 1 UDP 123456 192.168.1.1 12345 typ host raddr=10.0.0.1 rport=54321 generation 0\n\nexport default class RTCIceCandidate implements globalThis.RTCIceCandidate {\n  #address: string | null;\n  #candidate: string;\n  #component: globalThis.RTCIceComponent | null;\n  #foundation: string | null;\n  #port: number | null;\n  #priority: number | null;\n  #protocol: globalThis.RTCIceProtocol | null;\n  #relatedAddress: string | null;\n  #relatedPort: number | null;\n  #sdpMLineIndex: number | null;\n  #sdpMid: string | null;\n  #tcpType: globalThis.RTCIceTcpCandidateType | null;\n  #type: globalThis.RTCIceCandidateType | null;\n  #usernameFragment: string | null;\n\n  constructor({\n    candidate,\n    sdpMLineIndex,\n    sdpMid,\n    usernameFragment,\n  }: globalThis.RTCIceCandidateInit) {\n    if (sdpMLineIndex == null && sdpMid == null)\n      throw new TypeError('At least one of sdpMLineIndex or sdpMid must be specified');\n\n    this.#candidate = candidate === null ? 'null' : (candidate ?? '');\n    this.#sdpMLineIndex = sdpMLineIndex ?? null;\n    this.#sdpMid = sdpMid ?? null;\n    this.#usernameFragment = usernameFragment ?? null;\n\n    if (candidate) {\n      const fields = candidate.split(' ');\n      this.#foundation = fields[0]!.replace('candidate:', ''); // remove text candidate:\n      this.#component = fields[1] == '1' ? 'rtp' : 'rtcp';\n      this.#protocol = fields[2] as globalThis.RTCIceProtocol;\n      this.#priority = parseInt(fields[3], 10);\n      this.#address = fields[4];\n      this.#port = parseInt(fields[5], 10);\n      this.#type = fields[7] as globalThis.RTCIceCandidateType;\n      this.#tcpType = null;\n      this.#relatedAddress = null;\n      this.#relatedPort = null;\n\n      // Parse the candidate string to extract relatedPort and relatedAddress\n      for (let i = 8; i < fields.length; i++) {\n        const field = fields[i];\n        if (field === 'raddr') {\n          this.#relatedAddress = fields[i + 1];\n        } else if (field === 'rport') {\n          this.#relatedPort = parseInt(fields[i + 1], 10);\n        }\n\n        if (this.#protocol === 'tcp' && field === 'tcptype') {\n          this.#tcpType = fields[i + 1] as globalThis.RTCIceTcpCandidateType;\n        }\n      }\n    }\n  }\n\n  get address(): string | null {\n    return this.#address ?? null;\n  }\n\n  get candidate(): string {\n    return this.#candidate;\n  }\n\n  get component(): globalThis.RTCIceComponent | null {\n    return this.#component;\n  }\n\n  get foundation(): string | null {\n    return this.#foundation ?? null;\n  }\n\n  get port(): number | null {\n    return this.#port ?? null;\n  }\n\n  get priority(): number | null {\n    return this.#priority ?? null;\n  }\n\n  get protocol(): globalThis.RTCIceProtocol | null {\n    return this.#protocol ?? null;\n  }\n\n  get relatedAddress(): string | null {\n    return this.#relatedAddress;\n  }\n\n  get relatedPort(): number | null {\n    return this.#relatedPort ?? null;\n  }\n\n  get sdpMLineIndex(): number | null {\n    return this.#sdpMLineIndex;\n  }\n\n  get sdpMid(): string | null {\n    return this.#sdpMid;\n  }\n\n  get tcpType(): globalThis.RTCIceTcpCandidateType | null {\n    return this.#tcpType;\n  }\n\n  get type(): globalThis.RTCIceCandidateType | null {\n    return this.#type ?? null;\n  }\n\n  get usernameFragment(): string | null {\n    return this.#usernameFragment;\n  }\n\n  toJSON(): globalThis.RTCIceCandidateInit {\n    return {\n      candidate: this.#candidate,\n      sdpMLineIndex: this.#sdpMLineIndex,\n      sdpMid: this.#sdpMid,\n      usernameFragment: this.#usernameFragment,\n    };\n  }\n}\n"],"names":[],"mappings":"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"}