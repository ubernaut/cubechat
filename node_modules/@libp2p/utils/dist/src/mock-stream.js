import { StreamMessageEvent } from '@libp2p/interface';
import { defaultLogger } from '@libp2p/logger';
import { raceSignal } from 'race-signal';
import { AbstractStream } from "./abstract-stream.js";
let streamId = 0;
export class MockStream extends AbstractStream {
    local;
    remote;
    constructor(init) {
        const id = `${streamId++}`;
        super({
            ...init,
            id,
            log: defaultLogger().forComponent(`libp2p:stream-pair:${init.direction}:${id}`)
        });
        this.local = init.local;
        this.remote = init.remote;
        this.local.addEventListener('drain', () => {
            this.safeDispatchEvent('drain');
        });
        this.remote.addEventListener('message', (evt) => {
            this.onData(evt.data);
        });
        this.remote.addEventListener('reset', (evt) => {
            this.onRemoteReset();
        });
        this.remote.addEventListener('closeWrite', (evt) => {
            this.onRemoteCloseWrite();
        });
    }
    sendData(data) {
        const canSendMore = this.local.send(new StreamMessageEvent(data));
        return {
            sentBytes: data.byteLength,
            canSendMore
        };
    }
    sendReset() {
        this.local.send(new Event('reset'));
    }
    async sendCloseWrite(options) {
        return raceSignal(new Promise((resolve, reject) => {
            this.local.send(new Event('closeWrite'));
            this.local.onIdle().then(resolve, reject);
        }), options?.signal);
    }
    async sendCloseRead(options) {
        return raceSignal(new Promise((resolve, reject) => {
            this.local.send(new Event('closeRead'));
            this.local.onIdle().then(resolve, reject);
        }), options?.signal);
    }
    sendPause() {
        this.local.send(new Event('pause'));
    }
    sendResume() {
        this.local.send(new Event('resume'));
    }
    onRemotePaused() {
        this.local.pause();
    }
    onRemoteResumed() {
        this.local.resume();
    }
    onMuxerDrain() {
        this.local.resume();
    }
}
//# sourceMappingURL=mock-stream.js.map