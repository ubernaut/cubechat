import { serviceCapabilities, serviceDependencies, transportSymbol } from '@libp2p/interface';
import { ReservationStore } from './reservation-store.js';
import type { CircuitRelayTransportComponents, CircuitRelayTransportInit } from '../index.ts';
import type { Transport, CreateListenerOptions, Listener, Connection, Stream, OutboundConnectionUpgradeEvents, DialTransportOptions, OpenConnectionProgressEvents } from '@libp2p/interface';
import type { Multiaddr } from '@multiformats/multiaddr';
import type { ProgressEvent } from 'progress-events';
export type CircuitRelayDialEvents = OutboundConnectionUpgradeEvents | OpenConnectionProgressEvents | ProgressEvent<'circuit-relay:open-connection'> | ProgressEvent<'circuit-relay:reuse-connection'> | ProgressEvent<'circuit-relay:open-hop-stream'> | ProgressEvent<'circuit-relay:write-connect-message'> | ProgressEvent<'circuit-relay:read-connect-response'>;
export declare class CircuitRelayTransport implements Transport<CircuitRelayDialEvents> {
    private readonly components;
    private readonly discovery?;
    readonly reservationStore: ReservationStore;
    private readonly maxInboundStopStreams;
    private readonly maxOutboundStopStreams?;
    private started;
    private readonly log;
    private shutdownController;
    constructor(components: CircuitRelayTransportComponents, init?: CircuitRelayTransportInit);
    readonly [Symbol.toStringTag] = "@libp2p/circuit-relay-v2-transport";
    readonly [serviceCapabilities]: string[];
    get [serviceDependencies](): string[];
    readonly [transportSymbol] = true;
    isStarted(): boolean;
    start(): Promise<void>;
    stop(): Promise<void>;
    /**
     * Dial a peer over a relay
     */
    dial(ma: Multiaddr, options: DialTransportOptions<CircuitRelayDialEvents>): Promise<Connection>;
    /**
     * Create a listener
     */
    createListener(options: CreateListenerOptions): Listener;
    /**
     * Filter check for all Multiaddrs that this transport can listen on
     */
    listenFilter(multiaddrs: Multiaddr[]): Multiaddr[];
    /**
     * Filter check for all Multiaddrs that this transport can dial
     */
    dialFilter(multiaddrs: Multiaddr[]): Multiaddr[];
    /**
     * An incoming STOP request means a remote peer wants to dial us via a relay
     */
    onStop(stream: Stream, connection: Connection): Promise<void>;
}
//# sourceMappingURL=index.d.ts.map