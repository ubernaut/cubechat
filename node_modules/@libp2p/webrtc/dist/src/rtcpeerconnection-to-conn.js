import { AbstractMultiaddrConnection } from '@libp2p/utils';
class RTCPeerConnectionMultiaddrConnection extends AbstractMultiaddrConnection {
    peerConnection;
    constructor(init) {
        super(init);
        this.peerConnection = init.peerConnection;
        const initialState = init.peerConnection.connectionState;
        this.peerConnection.onconnectionstatechange = () => {
            this.log.trace('peer connection state change %s initial state %s', this.peerConnection.connectionState, initialState);
            if (this.peerConnection.connectionState === 'disconnected' || this.peerConnection.connectionState === 'failed' || this.peerConnection.connectionState === 'closed') {
                // nothing else to do but close the connection
                this.onTransportClosed();
                // only necessary with node-datachannel
                // https://github.com/murat-dogan/node-datachannel/issues/366#issuecomment-3228453155
                this.peerConnection.close();
            }
        };
    }
    sendData(data) {
        return {
            sentBytes: data.byteLength,
            canSendMore: true
        };
    }
    async sendClose(options) {
        this.peerConnection.close();
        options?.signal?.throwIfAborted();
    }
    sendReset() {
        this.peerConnection.close();
    }
    sendPause() {
        // TODO: readable backpressure?
    }
    sendResume() {
        // TODO: readable backpressure?
    }
}
/**
 * Convert a RTCPeerConnection into a MultiaddrConnection
 * https://github.com/libp2p/interface-transport#multiaddrconnection
 */
export const toMultiaddrConnection = (init) => {
    return new RTCPeerConnectionMultiaddrConnection(init);
};
//# sourceMappingURL=rtcpeerconnection-to-conn.js.map