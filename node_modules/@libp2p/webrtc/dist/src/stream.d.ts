import { AbstractStream } from '@libp2p/utils';
import { Uint8ArrayList } from 'uint8arraylist';
import type { DataChannelOptions } from './index.js';
import type { AbortOptions, MessageStreamDirection, Logger } from '@libp2p/interface';
import type { AbstractStreamInit, SendResult } from '@libp2p/utils';
export interface WebRTCStreamInit extends AbstractStreamInit, DataChannelOptions {
    /**
     * The network channel used for bidirectional peer-to-peer transfers of
     * arbitrary data
     *
     * {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel}
     */
    channel: RTCDataChannel;
    log: Logger;
}
export declare class WebRTCStream extends AbstractStream {
    /**
     * The data channel used to send and receive data
     */
    private readonly channel;
    /**
     * push data from the underlying datachannel to the length prefix decoder
     * and then the protobuf decoder.
     */
    private readonly incomingData;
    private readonly maxBufferedAmount;
    private receivedFinAck?;
    private finAckTimeout;
    constructor(init: WebRTCStreamInit);
    sendNewStream(): void;
    _sendMessage(data: Uint8ArrayList): void;
    sendData(data: Uint8ArrayList): SendResult;
    sendReset(err: Error): void;
    sendCloseWrite(options?: AbortOptions): Promise<void>;
    sendCloseRead(options?: AbortOptions): Promise<void>;
    /**
     * Handle incoming
     */
    private processIncomingProtobuf;
    private _sendFlag;
    sendPause(): void;
    sendResume(): void;
}
export interface WebRTCStreamOptions extends DataChannelOptions {
    /**
     * The network channel used for bidirectional peer-to-peer transfers of
     * arbitrary data
     *
     * {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel}
     */
    channel: RTCDataChannel;
    /**
     * The stream direction
     */
    direction: MessageStreamDirection;
    /**
     * The logger to create a scope from
     */
    log: Logger;
    /**
     * If true the underlying datachannel is being used to perform the noise
     * handshake during connection establishment
     */
    isHandshake?: boolean;
}
export declare function createStream(options: WebRTCStreamOptions): WebRTCStream;
//# sourceMappingURL=stream.d.ts.map