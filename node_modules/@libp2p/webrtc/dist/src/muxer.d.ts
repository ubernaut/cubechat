import { AbstractStreamMuxer } from '@libp2p/utils';
import { WebRTCStream } from './stream.js';
import type { DataChannelOptions } from './index.js';
import type { ComponentLogger, CounterGroup, StreamMuxer, StreamMuxerFactory, CreateStreamOptions, MultiaddrConnection } from '@libp2p/interface';
export interface DataChannelMuxerFactoryInit {
    /**
     * WebRTC Peer Connection
     */
    peerConnection: RTCPeerConnection;
    /**
     * The protocol to use
     */
    protocol?: string;
    /**
     * Optional metrics for this data channel muxer
     */
    metrics?: CounterGroup;
    /**
     * Options used to create data channels
     */
    dataChannelOptions?: DataChannelOptions;
}
export interface DataChannelMuxerFactoryComponents {
    logger: ComponentLogger;
}
export declare class DataChannelMuxerFactory implements StreamMuxerFactory {
    readonly protocol: string;
    /**
     * WebRTC Peer Connection
     */
    private readonly peerConnection;
    private readonly metrics?;
    private readonly dataChannelOptions?;
    private readonly earlyDataChannels;
    constructor(init: DataChannelMuxerFactoryInit);
    private onEarlyDataChannel;
    createStreamMuxer(maConn: MultiaddrConnection): StreamMuxer;
}
export interface DataChannelMuxerInit extends DataChannelMuxerFactoryInit {
    protocol: string;
    /**
     * Incoming data channels that were opened by the remote before the peer
     * connection was established
     */
    earlyDataChannels: RTCDataChannel[];
}
export interface DataChannelMuxerComponents {
    logger: ComponentLogger;
}
/**
 * A libp2p data channel stream muxer
 */
export declare class DataChannelMuxer extends AbstractStreamMuxer<WebRTCStream> implements StreamMuxer<WebRTCStream> {
    private readonly peerConnection;
    private readonly dataChannelOptions;
    constructor(maConn: MultiaddrConnection, init: DataChannelMuxerInit);
    private onDataChannel;
    onCreateStream(options?: CreateStreamOptions): Promise<WebRTCStream>;
    onData(): void;
}
//# sourceMappingURL=muxer.d.ts.map