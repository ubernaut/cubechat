import { TypedEventEmitter } from 'main-event';
import type { DataChannelOptions, TransportCertificate } from '../index.js';
import type { WebRTCDirectTransportCertificateEvents } from './transport.js';
import type { PeerId, ListenerEvents, Listener, Upgrader, ComponentLogger, CounterGroup, Metrics, PrivateKey } from '@libp2p/interface';
import type { Keychain } from '@libp2p/keychain';
import type { Multiaddr } from '@multiformats/multiaddr';
import type { Datastore } from 'interface-datastore';
import type { TypedEventTarget } from 'main-event';
export interface WebRTCDirectListenerComponents {
    peerId: PeerId;
    privateKey: PrivateKey;
    logger: ComponentLogger;
    upgrader: Upgrader;
    keychain?: Keychain;
    datastore: Datastore;
    metrics?: Metrics;
    events?: CounterGroup;
}
export interface WebRTCDirectListenerInit {
    upgrader: Upgrader;
    certificate: TransportCertificate;
    maxInboundStreams?: number;
    dataChannel?: DataChannelOptions;
    rtcConfiguration?: RTCConfiguration | (() => RTCConfiguration | Promise<RTCConfiguration>);
    emitter: TypedEventTarget<WebRTCDirectTransportCertificateEvents>;
}
export interface WebRTCListenerMetrics {
    listenerEvents: CounterGroup;
}
export declare class WebRTCDirectListener extends TypedEventEmitter<ListenerEvents> implements Listener {
    private listeningMultiaddr?;
    private certificate;
    private stunServer?;
    private readonly connections;
    private readonly log;
    private readonly init;
    private readonly components;
    private readonly metrics?;
    private readonly shutdownController;
    constructor(components: WebRTCDirectListenerComponents, init: WebRTCDirectListenerInit);
    listen(ma: Multiaddr): Promise<void>;
    private startUDPMuxServer;
    private incomingConnection;
    getAddrs(): Multiaddr[];
    updateAnnounceAddrs(multiaddrs: Multiaddr[]): void;
    close(): Promise<void>;
}
//# sourceMappingURL=listener.d.ts.map