import { DataChannelMuxerFactory } from '../../muxer.js';
import type { DirectRTCPeerConnection } from './get-rtcpeerconnection.js';
import type { DataChannelOptions } from '../../index.js';
import type { ComponentLogger, Connection, CounterGroup, Logger, PeerId, PrivateKey, Upgrader } from '@libp2p/interface';
import type { Multiaddr } from '@multiformats/multiaddr';
export interface ConnectOptions {
    log: Logger;
    logger: ComponentLogger;
    events?: CounterGroup;
    remoteAddr: Multiaddr;
    role: 'client' | 'server';
    dataChannel?: DataChannelOptions;
    upgrader: Upgrader;
    peerId: PeerId;
    remotePeer?: PeerId;
    signal: AbortSignal;
    privateKey: PrivateKey;
}
export interface ClientOptions extends ConnectOptions {
    role: 'client';
}
export interface ServerOptions extends ConnectOptions {
    role: 'server';
}
export declare function connect(peerConnection: RTCPeerConnection, muxerFactory: DataChannelMuxerFactory, ufrag: string, options: ClientOptions): Promise<Connection>;
export declare function connect(peerConnection: DirectRTCPeerConnection, muxerFactory: DataChannelMuxerFactory, ufrag: string, options: ServerOptions): Promise<void>;
//# sourceMappingURL=connect.d.ts.map