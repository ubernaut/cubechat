import { DataChannelMuxerFactory } from '../muxer.js';
import type { WebRTCDialEvents, WebRTCTransportMetrics } from './transport.js';
import type { DataChannelOptions } from '../index.js';
import type { LoggerOptions, ComponentLogger, AbortOptions } from '@libp2p/interface';
import type { ConnectionManager, TransportManager } from '@libp2p/interface-internal';
import type { Multiaddr } from '@multiformats/multiaddr';
import type { ProgressOptions } from 'progress-events';
export interface IncomingStreamOptions extends AbortOptions {
    rtcConfiguration?: RTCConfiguration;
    dataChannelOptions?: Partial<DataChannelOptions>;
}
export interface ConnectOptions extends LoggerOptions, ProgressOptions<WebRTCDialEvents> {
    rtcConfiguration?: RTCConfiguration;
    dataChannel?: DataChannelOptions;
    multiaddr: Multiaddr;
    connectionManager: ConnectionManager;
    transportManager: TransportManager;
    dataChannelOptions?: Partial<DataChannelOptions>;
    signal?: AbortSignal;
    metrics?: WebRTCTransportMetrics;
    logger: ComponentLogger;
}
export declare function initiateConnection({ rtcConfiguration, dataChannel, signal, metrics, multiaddr: ma, connectionManager, transportManager, log, logger, onProgress }: ConnectOptions): Promise<{
    remoteAddress: Multiaddr;
    peerConnection: globalThis.RTCPeerConnection;
    muxerFactory: DataChannelMuxerFactory;
}>;
//# sourceMappingURL=initiate-connection.d.ts.map