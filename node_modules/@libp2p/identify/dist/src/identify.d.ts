import { serviceCapabilities } from '@libp2p/interface';
import { Identify as IdentifyMessage } from './pb/message.js';
import { AbstractIdentify } from './utils.js';
import type { Identify as IdentifyInterface, IdentifyComponents, IdentifyInit } from './index.js';
import type { IdentifyResult, AbortOptions, Connection, Stream, Startable } from '@libp2p/interface';
export declare class Identify extends AbstractIdentify implements Startable, IdentifyInterface {
    constructor(components: IdentifyComponents, init?: IdentifyInit);
    [serviceCapabilities]: string[];
    _identify(connection: Connection, options?: AbortOptions): Promise<IdentifyMessage>;
    identify(connection: Connection, options?: AbortOptions): Promise<IdentifyResult>;
    private maybeAddObservedAddress;
    /**
     * Sends the `Identify` response with the Signed Peer Record
     * to the requesting peer over the given `connection`
     */
    handleProtocol(stream: Stream, connection: Connection): Promise<void>;
}
//# sourceMappingURL=identify.d.ts.map